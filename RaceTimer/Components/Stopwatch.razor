@implements IDisposable

<div>
    <h1>
        @if (!hidden)
        {
            @formattedTime
        }
    </h1>
</div>

@code {
    public bool isRunning; // Indikerar om stoppuret är aktivt
    private System.Timers.Timer timer = new System.Timers.Timer(); // Timer för att räkna upp tiden

    // Formaterar tiden till hh:mm:ss.ff för att inkludera millisekunder
    private string formattedTime => TimeSpan.FromSeconds(elapsedTime).ToString(@"hh\:mm\:ss\.ff");

    [Parameter] public bool hidden { get; set; } = true;
    [Parameter] public EventCallback changeButton { get; set; }

    private DateTime? savedTimestamp;
    public float elapsedTime = 0; // Förfluten tid

    [Inject] private Blazored.LocalStorage.ILocalStorageService localStorage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Hämta sparad timestamp från localStorage
        savedTimestamp = await localStorage.GetItemAsync<DateTime?>("savedTimestamp");

        // Kontrollera om det finns en sparad timestamp
        if (savedTimestamp.HasValue)
        {
            // Beräkna förfluten tid
            var timeSpan = DateTime.Now - savedTimestamp.Value;
            elapsedTime = (float)timeSpan.TotalSeconds; // Återställ elapsedTime med den förflutna tiden
            isRunning = true;
            hidden = false;

            if (changeButton.HasDelegate)
            {
                changeButton.InvokeAsync();
            }

            StartTimer(); // Starta timern om det finns en sparad tid
        }
    }
    public async Task Start()
    {
        savedTimestamp = DateTime.Now; // Spara den aktuella tidpunkten
        elapsedTime = 0; // Återställ förfluten tid

        // Spara den aktuella tidpunkten i localStorage
        await localStorage.SetItemAsync("savedTimestamp", savedTimestamp);

        StartTimer(); // Starta timern
    }

    private void StartTimer()
    {
        isRunning = true;
        timer?.Dispose(); // Frigör timern om den existerar
        timer = new System.Timers.Timer(10); // Timern tickar var 10:e millisekund
        timer.Elapsed += UpdateElapsedTime; // Koppla metoden som ska köras
        timer.Start(); // Starta timern
    }

    private void UpdateElapsedTime(object sender, System.Timers.ElapsedEventArgs e)
    {
        // Beräkna förfluten tid
        var timeSpan = DateTime.Now - savedTimestamp.Value;
        elapsedTime = (float)timeSpan.TotalSeconds; // Återställ elapsedTime med den förflutna tiden
        InvokeAsync(StateHasChanged); // Uppdatera UI
    }

    public void Stop()
    {
        timer?.Stop(); // Stoppa timern
        isRunning = false;
        localStorage.RemoveItemAsync("savedTimestamp"); // Rensa timestamp från localStorage
        StateHasChanged(); // Uppdatera UI
    }

    public void Reset()
    {
        Stop(); // Stoppa timern
        elapsedTime = 0; // Återställ förfluten tid
        StateHasChanged(); // Uppdatera UI
    }

    public void Dispose()
    {
        timer?.Dispose(); // Frigör timern om den existerar
    }
}