@page "/timer/{RaceId}"
@inject RaceService raceService
@using Classes
<div class="table-container">
	<table class="table table-sm table-hover table-responsive">
		<thead class="table-secondary">
			<tr>
				<th>Bib</th>
				<th>Name</th>
				<th>Time</th>
				<th>Lap</th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@foreach (Racer racer in timeList)
			{
				<tr class="@((activeRacer==racer)?"table-primary":"")" @onclick="@(()=>activeRacer = (racer.Id == string.Empty)? racer:null)">
					<th>@racer.Bib</th>
					<td>@racer.Name @racer.Surname</td>
					<td>
						@if(racer.Id == string.Empty)
						{
							@racer.LapDateTime.Last().ToString("HH:mm:ss.ff")
						}
						else
						{
							(DateTime.Now - @racer.LapDateTime.Last()).ToString("HH:mm:ss.ff");
						}
					</td>
					<td>@racer.LapDateTime.Count</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<button class="btn btn-primary time-container">
	<h1 class="current-time text-center">@currentTime.ToString("HH:mm:ss.ff")</h1>
	<h2 class="btn-text text-center" @onclick="()=>AddLapTime(DateTime.Now)">Press to set time</h2>
</button>
<Numpad NumberClicked="NumberClicked" BackspaceClicked="BackspaceClicked" EnterClicked="EnterClicked"></Numpad>

@code {
		[Parameter] public string RaceId { get; set; }
	private Race currentRace;
	private System.Timers.Timer timer;
	private List<Racer> timeList = new List<Racer>();
	private Racer activeRacer = new Racer();

	public DateTime currentTime;

	protected override async Task OnInitializedAsync()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
		CreateUpdateTimer();
	}

	private void NumberClicked(int number)
	{
		if (activeRacer != null)
		{
			activeRacer.Bib += number.ToString();
		}
	}

	private void BackspaceClicked()
	{
		activeRacer.Bib = activeRacer.Bib.Substring(0, activeRacer.Bib.Length - 1);
	}

	private void EnterClicked()
	{
		SetRacer(activeRacer);
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	private void AddLapTime(DateTime dateTime)
	{
		Console.WriteLine($"Added {dateTime} to lapTimeList");
		var racer = new Racer();
		racer.LapDateTime.Add(dateTime);
		timeList.Add(racer);
	}

	private async Task SetRacer(Racer getRacer)
	{
		Console.WriteLine($"Trying to find {getRacer.Bib}");
		Racer? foundRacer = null;
		foreach (Startlist startlist in currentRace.Startlists)
		{
			foundRacer = startlist.Racers.Find(thisracer => thisracer.Bib == getRacer.Bib);
			if (foundRacer != null)
				break;
		}

		if(foundRacer != null)
		{
			Console.WriteLine($"Found {foundRacer.Bib} named {foundRacer.Name} {foundRacer.Surname}");
			foundRacer.LapDateTime.Add(getRacer.LapDateTime.Last());
			timeList.Remove(getRacer);
				timeList.Add(foundRacer);
				await raceService.UpdateRaceAsync(currentRace);
			return;
		}
		Console.WriteLine($"Didn't find {getRacer.Bib}");
	}
	
}