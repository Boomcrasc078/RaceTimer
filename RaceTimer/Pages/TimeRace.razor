@page "/timer/{RaceId}"
@inject RaceService raceService
@inject IJSRuntime JS
@using Classes




<div id="timeListContainer" class="table-container">
	<table class="table table-sm table-hover table-responsive">
		<thead class="table-secondary">
			<tr>
				<th>Bib</th>
				<th>Name</th>
				<th>Time</th>
				<th>Lap</th>
			</tr>
		</thead>
		<tbody class="table-group-divider">
			@foreach (Racer racer in timeList)
			{
				<tr class="@((activeRacer==racer)?"table-primary":"")" @onclick="@(()=>activeRacer = racer)">
					<th>@racer.Bib</th>
					<td>@racer.Name @racer.Surname</td>
					<td>
						@if (racer.StartDateTime.HasValue)
						{
							@((racer.LapDateTime.Last() - racer.StartDateTime.Value).ToString("hh\\:mm\\:ss\\.ff"))
						}
						else
						{
							@(racer.LapDateTime.Last().ToString("HH:mm:ss.ff"))
						}
					</td>
					<td>@racer.LapDateTime.Count</td>
				</tr>
			}
		</tbody>
	</table>
</div>

<button class="btn btn-primary time-container" @onclick="()=>SetTimeClick(DateTime.Now)">
	<h1 class="current-time text-center">@currentTime.ToString("HH:mm:ss.ff")</h1>
	<h2 class="btn-text text-center">Press to set time</h2>
</button>
<Numpad NumberClicked="NumberClicked" BackspaceClicked="BackspaceClicked" EnterClicked="EnterClicked"></Numpad>

<button type="button" class="btn btn-primary" @onclick="@(()=>(CreateToast(new Toast($"ToastTest{toasts.Count}", "Toast", "Toast"))))">Show toast</button>

<div class="toast-container position-fixed bottom-0 end-0 p-3">
	@foreach (Toast toast in toasts)
	{
		<div id="test" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="toast-header">
				<img src="..." class="rounded me-2" alt="...">
				<strong class="me-auto">@toast.title</strong>
				<small>123 minutes ago</small>
				<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
			</div>
			<div class="toast-body">
				Hello, world! This is a toast message.
			</div>
		</div>
	}
</div>

@code {
	[Parameter] public string RaceId { get; set; }
	private Race currentRace;
	private System.Timers.Timer timer;
	private List<Racer> timeList = new List<Racer>();
	private Racer? activeRacer;
	private List<Racer> nextEdit = new List<Racer>();
	private List<Toast> toasts = new List<Toast>();

	public DateTime currentTime;

	protected override async Task OnInitializedAsync()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
		CreateUpdateTimer();
	}

	private void NumberClicked(int number)
	{
		if (activeRacer != null)
		{
			activeRacer.Bib += number.ToString();
		}
	}

	private void BackspaceClicked()
	{
		activeRacer.Bib = activeRacer.Bib.Substring(0, activeRacer.Bib.Length - 1);
	}

	private async Task EnterClicked()
	{
		if (activeRacer == null)
		{
			return;
		}
		await SetRacer(activeRacer);
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	private async Task SetTimeClick(DateTime dateTime)
	{
		if (activeRacer != null && activeRacer.Id != "")
		{
			activeRacer.LapDateTime.Add(dateTime);
			Console.WriteLine($"Added {dateTime} to activeRacer: {activeRacer.Bib}");
			activeRacer = nextEdit[0];
			await raceService.UpdateRaceAsync(currentRace);
			await ScrollToBottomAsync();
			return;
		}

		Console.WriteLine($"Added {dateTime} to lapTimeList");
		var racer = new Racer();
		racer.LapDateTime.Add(dateTime);
		timeList.Add(racer);
		nextEdit.Add(racer);
		activeRacer = nextEdit[0];
		await ScrollToBottomAsync();
	}

	private async Task SetRacer(Racer getRacer)
	{
		Console.WriteLine($"Trying to find {getRacer.Bib}");
		Racer? foundRacer = null;
		foreach (Startlist startlist in currentRace.Startlists)
		{
			foundRacer = startlist.Racers.Find(thisracer => thisracer.Bib == getRacer.Bib);
			if (foundRacer != null)
				break;
		}

		if (foundRacer == null)
		{
			Console.WriteLine($"Didn't find {getRacer.Bib}");
			activeRacer.Bib = "";
			return;
		}

		Console.WriteLine($"Found {foundRacer.Bib} named {foundRacer.Name} {foundRacer.Surname}");
		foundRacer.LapDateTime.Add(getRacer.LapDateTime.Last());
		int index = timeList.IndexOf(getRacer);
		timeList.Remove(foundRacer);
		timeList.Insert(index, foundRacer);
		timeList.Remove(getRacer);
		await raceService.UpdateRaceAsync(currentRace);
		if (nextEdit.Contains(activeRacer))
		{
			nextEdit.Remove(activeRacer);
		}
		if (nextEdit.Count > 0)
		{
			activeRacer = nextEdit[0];
		}
	}

	private async Task ScrollToBottomAsync()
	{
		await JS.InvokeVoidAsync("scrollToBottom", "timeListContainer");
	}

	private async Task CreateToast(Toast toast)
	{
		toasts.Add(toast);
		await InvokeAsync(StateHasChanged); 
		await JS.InvokeVoidAsync("createToast", "test");
	}
}