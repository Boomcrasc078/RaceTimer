@page "/races"

@using RaceTimer.Classes
@inject RaceService raceService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using System.IO
@using Microsoft.AspNetCore.Components
@using RaceTimer.Components

<PageTitle>PocketRace | All Races</PageTitle>

<Toasts />

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModal" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="deleteModal">Delete Race</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete @modalRace.Name?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="()=>DeleteRace(modalRace)">Delete</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
			</div>
		</div>
	</div>
</div>

<div class="all-races-container">
	<div class="top-row">
		<h1 class="top-row-title">All Races</h1>
		<div>
			<InputFile OnChange="ImportRace" accept=".xlsx" class="d-none" id="fileInput" />
			<label for="fileInput" class="btn btn-secondary btn-top-row">
				<i class="bi bi-box-arrow-in-down"></i>
			</label>
			<button class="btn btn-primary btn-top-row" @onclick="()=>AddRace()">
				<i class="bi bi-plus-lg"></i>
			</button>
		</div>
	</div>
	<div class="all-races-cards">
		@if (races != null)
		{
			@foreach (Race race in races)
			{
				<div class="card @race.currentAnimation">
					<div class="card-header">
						<h5 class="card-title">
							@if (race.Name == "")
							{
								<span>Untitled Race</span>
							}
							else
							{
								@race.Name
							}
						</h5>
					</div>
					<div class="card-body">
						<div class="card-text">
							<div>
								<div>Created <span class="text-primary">@race.creationDateTime.ToShortDateString()</span></div>
								<div>
									Last edited <span>@GetTimeSpan(DateTime.Now - race.lastEditDateTime)</span>
								</div>
							</div>
							@if (race.Startlists.Count > 0)
							{
								<div>Startlists:</div>
								<ul>
									@foreach (Startlist startlist in race.Startlists)
									{
										<li>@startlist.Name</li>
									}
								</ul>
							}
						</div>
						<div class="race-buttons">
							<a href="@($"/races/edit/{race.Id}")" class="btn btn-primary">
								<i class="bi bi-pencil-square"></i> Edit
							</a>
							<button type="button" class="btn btn-danger btn-race" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="()=>modalRace = race">
								<i class="bi bi-trash3"></i> Delete
							</button>
							<button class="btn btn-secondary btn-race">
								<i class="bi bi-copy"></i> Duplicate
							</button>
							<button class="btn btn-secondary btn-race" @onclick="() => ExportAndDownloadRace(race)">
								<i class="bi bi-box-arrow-up"></i> Export
							</button>
						</div>
					</div>
					<div class="card-footer">
					</div>
				</div>
			}
		}
	</div>
</div>

@code {
	private Random random = new Random();
	private List<Race> races = new List<Race>();
	private Race modalRace = new Race();
	private string deleteAnimation = "";
	private ExcelHandler excelHandler = new ExcelHandler();
	private Toasts toasts = new Toasts();

	protected override async Task OnInitializedAsync()
	{
		races = await raceService.GetRacesAsync();
	}

	private async Task AddRace()
	{
		Race addRace = new Race()
			{
				Name = "",
				Startlists = new List<Startlist>(),
				creationDateTime = DateTime.Now,
				lastEditDateTime = DateTime.Now
			};

		addRace.Id = RandomBase64Generator.GenerateBase64String(5);

		while (races.Exists(race => race.Id == addRace.Id) || addRace.Id.Contains("/"))
		{
			addRace.Id = RandomBase64Generator.GenerateBase64String(5);
		}

		races.Add(addRace);
		await raceService.SaveRacesAsync(races);

		NavManager.NavigateTo($"/races/edit/{addRace.Id}");
	}

	private async Task DeleteRace(Race deleteRace)
	{
		if (deleteRace == null)
			return;
		if (!races.Contains(deleteRace))
			return;

		deleteRace.currentAnimation = "fade-out";

		await Task.Delay(500);

		deleteRace.currentAnimation = "";

		races.Remove(deleteRace);
		await raceService.SaveRacesAsync(races);
	}

	private async Task ExportAndDownloadRace(Race race)
	{
		using var memoryStream = excelHandler.ExportRaceToExcel(race);
		var fileName = $"{race.Name.Replace(" ", "_")}.xlsx";
		var fileBytes = memoryStream.ToArray();
		await DownloadFile(fileBytes, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	}

	private async Task DownloadFile(byte[] fileBytes, string fileName, string contentType)
	{
		var base64Data = Convert.ToBase64String(fileBytes);
		await JS.InvokeVoidAsync("downloadFileFromBlazor", fileName, contentType, base64Data);
	}

	private async Task ImportRace(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			var memoryStream = new MemoryStream();
			await file.OpenReadStream().CopyToAsync(memoryStream);
			memoryStream.Position = 0;
			var importedRace = excelHandler.ImportRaceFromExcel(memoryStream, races, file.Name);
			races.Add(importedRace);
			await raceService.SaveRacesAsync(races);
			await InvokeAsync(StateHasChanged);
			NavManager.NavigateTo($"/races/edit/{importedRace.Id}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during file import: {ex.Message}");
			toasts?.CreateToast(new Toast("", $"Error during file import: {ex.Message}", "text-bg-danger"));
		}
	}

	public static string GetTimeSpan(TimeSpan timeSpan)
	{
		if (timeSpan.TotalSeconds < 60)
			return timeSpan.Seconds + " seconds ago";

		if (timeSpan.TotalMinutes < 60)
			return timeSpan.Minutes + " minutes ago";

		if (timeSpan.TotalHours < 24)
			return timeSpan.Hours + " hours ago";

		if (timeSpan.TotalDays < 7)
			return timeSpan.Days + " days ago";

		if (timeSpan.TotalDays < 30)
			return Math.Floor(timeSpan.TotalDays / 7) + " weeks ago";

		if (timeSpan.TotalDays < 365)
			return Math.Floor(timeSpan.TotalDays / 30) + " months ago";

		return Math.Floor(timeSpan.TotalDays / 365) + " years ago";
	}
}
