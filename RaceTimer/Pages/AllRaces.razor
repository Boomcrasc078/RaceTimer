@page "/races"

@using Classes
@inject RaceService raceService
@inject NavigationManager NavManager
@inject IJSRuntime JS
@using System.IO
@using Microsoft.AspNetCore.Components

<PageTitle>PocketRace | All Races</PageTitle>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="deleteModal">Delete Race</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete @modalRace.Name?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="()=>DeleteRace(modalRace)">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>

<div class="all-races-container">
    <div class="container">
        <div class="container top-row d-flex justify-content-between align-items-center mb-3 pt-3 pb-2">
            <h1 class="fw-bold">All Races</h1>
            <div>
                <InputFile OnChange="HandleFileSelected" accept=".xlsx" class="d-none" id="fileInput" />
                <label for="fileInput" class="btn btn-secondary btn-add-race">
                    <i class="bi bi-box-arrow-in-down"></i>
                </label>
                <button class="btn btn-primary btn-add-race" @onclick="()=>AddRace()">
                    <i class="bi bi-plus-lg"></i>
                </button>
            </div>
        </div>
        <div class="py-2">
            @if (races != null)
            {
                @foreach (Race race in races)
                {
                    <div class="card mb-3 @race.currentAnimation">
                        <div class="card-body d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">
                                    @if (race.Name == "")
                                    {
                                        <span>Untitled Race</span>
                                    }
                                    else
                                    {
                                        <span>@race.Name</span>
                                    }
                                </h5>
                                <p class="card-text">
                                    <div class="container">
                                        <div>Created <span class="text-primary">@race.creationDateTime.ToShortDateString()</span></div>
                                        <div>Last edited <span class="text-primary">@(Math.Floor((DateTime.UtcNow - race.lastEditDateTime).TotalDays)) days ago</span></div>
                                    </div>
                                    @if (race.Startlists.Count > 0)
                                    {
                                        <div class="fw-bold">Startlists:</div>
                                        <ul>
                                            @foreach (Startlist startlist in race.Startlists)
                                            {
                                                <li>@startlist.Name</li>
                                            }
                                        </ul>
                                    }
                                </p>
                            </div>

                            <div class="d-flex flex-column align-items-end">
                                <a href="@($"/races/edit/{race.Id}")" class="btn btn-primary mb-2">
                                    <i class="bi bi-pencil-square"></i> Edit
                                </a>
                                <button type="button" class="btn btn-danger mb-2" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="()=>modalRace = race">
                                    <i class="bi bi-trash3"></i> Delete
                                </button>
                                <button class="btn btn-secondary mb-2">
                                    <i class="bi bi-copy"></i> Duplicate
                                </button>
                                <button class="btn btn-secondary" @onclick="() => ExportAndDownloadRace(race)">
                                    <i class="bi bi-box-arrow-up"></i> Export
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private Random random = new Random();
    private List<Race> races = new List<Race>();
    private Race modalRace = new Race();
    private string deleteAnimation = "";
    private ExcelHandler excelHandler = new ExcelHandler();

    protected override async Task OnInitializedAsync()
    {
        races = await raceService.GetRacesAsync();
    }

    private async Task AddRace()
    {
        Race addRace = new Race()
            {
                Name = "",
                Startlists = new List<Startlist>(),
                creationDateTime = DateTime.UtcNow,
                lastEditDateTime = DateTime.UtcNow
            };

        addRace.Id = RandomBase64Generator.GenerateBase64String(5);

        while (races.Exists(race => race.Id == addRace.Id) && addRace.Id.Contains("/"))
        {
            addRace.Id = RandomBase64Generator.GenerateBase64String(5);
        }

        races.Add(addRace);
        await raceService.SaveRacesAsync(races);

        NavManager.NavigateTo($"/races/edit/{addRace.Id}");
    }

    private async Task DeleteRace(Race deleteRace)
    {
        if (deleteRace == null)
            return;
        if (!races.Contains(deleteRace))
            return;

        deleteRace.currentAnimation = "fade-out";

        await Task.Delay(500);

        deleteRace.currentAnimation = "";

        races.Remove(deleteRace);
        await raceService.SaveRacesAsync(races);
    }

    private async Task ExportAndDownloadRace(Race race)
    {
        using var memoryStream = excelHandler.ExportRaceToExcel(race);
        var fileName = $"{race.Name.Replace(" ", "_")}.xlsx";
        var fileBytes = memoryStream.ToArray();
        await DownloadFile(fileBytes, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    }

    private async Task DownloadFile(byte[] fileBytes, string fileName, string contentType)
    {
        var base64Data = Convert.ToBase64String(fileBytes);
        await JS.InvokeVoidAsync("downloadFileFromBlazor", fileName, contentType, base64Data);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            var memoryStream = new MemoryStream();

            // Läs filen asynkront
            await file.OpenReadStream().CopyToAsync(memoryStream);
            memoryStream.Position = 0; // Sätt positionen till början av streamen

            // Importera racet från minnesströmmen
            var raceName = "Imported Race"; // Du kan lägga till ett valbart namn här
            var importedRace = excelHandler.ImportRaceFromExcel(memoryStream, raceName);

            ImportRace(importedRace);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during file import: {ex.Message}");
        }
    }



    private async Task ImportRace(Race race)
    {
        race.Id = RandomBase64Generator.GenerateBase64String(5);

        while (races.Exists(race => race.Id == race.Id) && race.Id.Contains("/"))
        {
            race.Id = RandomBase64Generator.GenerateBase64String(5);
        }

        foreach(Startlist startlist in race.Startlists)
        {
            startlist.Id = RandomBase64Generator.GenerateBase64String(5);

            while (race.Startlists.Exists(startlist => startlist.Id == startlist.Id) && startlist.Id.Contains("/"))
            {
                startlist.Id = RandomBase64Generator.GenerateBase64String(5);
            }
        }

        race.Startlists = race.Startlists.OrderBy(startlist => startlist.Name).ToList();

        race.creationDateTime = DateTime.UtcNow;
        race.lastEditDateTime = DateTime.UtcNow;

        race.Name = "";

        races.Add(race);
        await raceService.SaveRacesAsync(races);

        NavManager.NavigateTo($"/races/edit/{race.Id}");
    }
}
