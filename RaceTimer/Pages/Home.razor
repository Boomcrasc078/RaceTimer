@page "/home"

<PageTitle>Home</PageTitle>
<br />
<h1 class="text-center fw-bold">Welcome arranger!</h1>
<br />
<div class="container text-box">
	<div class="px-4 py-4">
		<h2><b>This is PocketRace</b></h2>
		Create and manage races seamlessly with PocketRace. Set up race events, generate start lists, accurately time the race, and easily share results with your participants.
		<br />
	</div>
</div>
<br>
<div class="container text-box">
	<div class="px-4 py-4">
		<h2><b>Learn PocketRace</b></h2>
		<div>
			Easily set up your race, create start lists, time each participant, and share results with ease. PocketRace is designed to simplify race management, making it the ideal solution for organizers looking for a straightforward, reliable timing tool.
		</div>
		<br />
		<button class="btn btn-primary">
			Learn PocketRace
		</button>
	</div>
</div>
<br />
<div class="container text-box">
	<div class="px-4 py-4">
		<h2><b>Me, The Developer</b></h2>
		<div>
			I'm Mose Fredrik Grafström, a 17-year-old from just outside Stockholm, Sweden. I created this app because most other race-timing applications are costly and geared toward large-scale events. My aim with PocketRace is to provide an easy-to-use solution for smaller clubs and groups, allowing them to organize their races without the high costs.
		</div>
		<br />
		<button class="btn btn-primary">
			Read More
		</button>
	</div>
</div>
<br />
<div class="text-center">
	<PageTitle>Race</PageTitle>

	<div>

		@if (!stopwatch.isRunning)
		{
			<button class="btn btn-success" @onclick="StartStopwatch">Start Race</button>
		}

		<RaceTimer.Components.Stopwatch @ref="stopwatch"></RaceTimer.Components.Stopwatch>

	</div>
	<div>
		@if (stopwatch.isRunning)
		{
			<button class="btn btn-danger" @onclick="ResetStopwatch">Cancel Race</button>
		}
	</div>
</div>


@code {

	private RaceTimer.Components.Stopwatch stopwatch = new RaceTimer.Components.Stopwatch();

	private async Task StartStopwatch()
	{
		await stopwatch.Start();
		ChangeButton();
	}

	private void ResetStopwatch()
	{
		stopwatch.Reset();
		ChangeButton();
	}

	protected override async Task OnInitializedAsync()
	{
		ChangeButton();
	}

	public void ChangeButton()
	{
		if (stopwatch.isRunning)
		{
			stopwatch.hidden = false;
		}
		else
		{
			stopwatch.hidden = true;
		}
		InvokeAsync(StateHasChanged);
	}
}